路由守卫：
    路由又叫做路由拦截钩子函数，进行拦截路由跳转
    主要使用场景：
        注册、登录、VIP、充钱、权限

    路由守卫分为三类：
        全局路由守卫：【常用前置守卫】
            前置守卫：beforeEach(to,from,next)【常用】
                就是刚开始进入页面就起作用的路由前置守卫
                接收三个参数：
                    to:你要导航去得那个组件的路由信息
                    from:你当前离开的组件的路由信息
                    next:回调函数

                    next():当前拦截的组件放行
                    next(false):拦截在当前组件
                    next({path:'/login'}):拦截并导航到登录页

            后置全局守卫：afterEach(to,from)
                提示你确定要离开吗？
                提示你是否保存数据？

        路由独享守卫：【常用】
            路由独享钩子：beforeEnter()
             路由独享钩子只有这一个，进入时拦截，参数同全局前置守卫
             写在路由配置对象信息中

        组件内路由守卫：
            进入组件拦截钩子：beforeRouteEnter()参数同全局前置守卫
                是在当前进入的组件 beforeCreate()生命周期之前执行
                beforeRouteEnter()在beforeCreate()之前执行
                beforeRouteEnter()里面没有实例【没有this】，不能访问组件内的任何数据
                还在渲染页面，不能访问this
                next((vm)=>{
                    vm:代表当前组件的实例
                })
            组件内路由变化钩子函数：beforeRouteUpdate()
                场景：当前组件内路由变化了，会触发当前钩子函数 
                可以代替组件中的watch，只能监听路由变化
                参数同上
            组件内离开时的钩子函数：beforeRouteLeave()
                场景：清除定时器、提示保存数据、提示离开效果
                参数同上
        next()  boolean  {}   函数   字符串

router.beforeEach()
用到权限或者路由拦截时，写路由元信息、meta对象
    meta:{
      requireAuth:true,
    }