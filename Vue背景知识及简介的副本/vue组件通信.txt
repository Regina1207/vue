vue组件通信：
    1、父传子：
        父组件中通过自定义属性(v-bind绑定)的方式给子组件传递数据
        子组件通过props接收，可以使用数组接收，可以使用对象接收（判断类型、校验、是否必传等）
        注意：如果父组件传递的是引用数据类型，子组件中props以对象的方式接收数据，如果设置默认值
             那么，你得通过一个函数去返回一个默认对象
    2、子传父：
        1、作用域插槽
            子组件通过自定义属性的方式在slot标签上传递数据
            父组件在引入的子组件内部通过slot-scope或者v-slot以对象的
            方式接收子组件的数据
        2、$emit()：
            子组件发送数据，通过$emit()，父组件在methods方法内定义接收数据
            的函数，传递形参，然后赋值即可
            如果需要自动去发送数据并且接收数据，需要在子组件中的created、beforeMount、
            mounted中发送数据即可
            父组件中绑定自定义函数名（$emit()函数的第一个参数）

            整体过程：父级组件调用了子组件内的回调函数

            $emit()只负责发送数据，接收两个参数，第一个参数是监听回调函数名，第二个参数是要传递的数据


    3、同级组件
        1、子传父，父传子  例如：A传父组件，父组件传B
        2、事件总线（中间转换站：解决了层层传递问题），任何组件之间都可以传递数据
           发送数据的组件通过$emit()发送数据
           接收数据的组件通过$on()接收数据

           $on():只负责接收数据，第一个参数为$emit()的第一个参数，第二个参数
                为回调函数，此接收一个形参 （注意：this问题）
        3、本地存储
        4、路由传参 (不太适用)

        在需要发送数据的组件里面使用$emit()进行发送即可

        在需要接受数据的组件里面使用$on()进行接收即可 （this问题，用箭头函数可解决）

    4、不同页面之间数据传递：
        1、通过params、query
        2、生命周期配合$emit、$on实现
            旧组件等新组件挂在之前可以发送数据
            新组件等就组件销毁之后才可以接收数据

            可以发送数据的生命周期函数：
                destroyed
                beforeDestroy
            可以接收数据的生命周期函数：
                beforeMount 
                created
                beforeCreate  
            $off('发送数据的监听函数'):解绑发送数据的监听函数，先解绑再发送


